
repeat task.wait() until game:IsLoaded() and game:GetService"Players".LocalPlayer:GetMouse()

local Library, Utilities, Connections = {
	
	Closed = false,
	Destroyed = false,
	IsMinimizing = false,
	CurrentTab = nil,
	
}, {}, {}

local Players = game:GetService"Players"

local Client = Players.LocalPlayer

local Mouse = Client:GetMouse()

local TweenService, UserInputService = game:GetService"TweenService", game:GetService"UserInputService"

local BannedKeys, ShortNames = {
	Return = true,
	Space = true,
	Tab = true,
	Backquote = true,
	CapsLock = true,
	Escape = true,
	Unknown = true,
}, {
	RightControl = "Right Ctrl",
	LeftControl = "Left Ctrl",
	LeftShift = "Left Shift",
	RightShift = "Right Shift",
	Semicolon = ";",
	Quote = '"',
	LeftBracket = "[",
	RightBracket = "]",
	Equals = "=",
	Minus = "-",
	RightAlt = "Right Alt",
	LeftAlt = "Left Alt"
}

function Utilities:Tween(Obj, Duration, Props, ...)
	
	return TweenService:Create(Obj, TweenInfo.new(Duration, ...), Props):Play()
	
end

function Utilities:Drag(Frame, Hold)
	
	Hold = Hold or Frame
	
	local Dragging, DragInput, DragStart, StartPos
	
	function Utilities:Update(Input)

		local Delta = Input.Position - DragStart

		Frame.Position = UDim2.new(StartPos.X.Scale, StartPos.X.Offset + Delta.X, StartPos.Y.Scale, StartPos.Y.Offset + Delta.Y)

	end
	
	Hold.InputBegan:Connect(function(Input)
		
		if Input.UserInputType == Enum.UserInputType.MouseButton1 then
			
			Dragging, DragStart, StartPos = true, Input.Position, Frame.Position

			Input.Changed:Connect(function()
				
				if Input.UserInputState == Enum.UserInputState.End then
					
					Dragging = false
					
				end
				
			end)
			
		end
		
	end)

	Frame.InputChanged:Connect(function(Input)
		
		if Input.UserInputType == Enum.UserInputType.MouseMovement then
			
			DragInput = Input
			
		end
		
	end)

	UserInputService.InputChanged:Connect(function(Input)
		
		if Input == DragInput and Dragging then
			
			Utilities:Update(Input)
			
		end
		
	end)
	
end

function Utilities:Minimize(Frame, Destroy)
	
	if Library.IsMinimizing then
		
		return
		
	end
	
	Library.IsMinimizing = true
	
	Utilities:Tween(Frame, .5, {Size = UDim2.new(0, 530,0, ((Library.Closed or Destroy) and 35) or 348)})
	
	Library.Closed = not Library.Closed
	
	if Destroy then
		
		task.wait(.9)
		
		Frame:Destroy()
		
	end
	
	Library.IsMinimizing = false
	
end

function Utilities:ChangeTab(Tab, Holder)
	
	if Library.IsChangingTab or (Library.CurrentTab and Library.CurrentTab[1] == Tab) then
		
		return
		
	end
	
	if Library.CurrentTab then
		
		Library.CurrentTab[2].Visible = false
		Utilities:Tween(Library.CurrentTab[1].TabLine, .5, {Size = UDim2.new(0, 0, 0, 1)})
		
	end
	
	Utilities:Tween(Tab.TabLine, .5, {Size = UDim2.new(0, 119, 0, 1)})
	Holder.Visible = true
	
	Library.CurrentTab = {Tab, Holder}
	
end

function Utilities:ButtonAnimation(Btn)
	
	Utilities:Tween(Btn, .1, {Size = UDim2.new(0, 348,0, 31)})
	task.wait(.1)
	Utilities:Tween(Btn, .1, {Size = UDim2.new(0, 358,0, 31)})
	
end

function Utilities:Load()
	
	local Loading = Instance.new("ScreenGui")
	local Main = Instance.new("Frame")
	local MainC = Instance.new("UICorner")
	local TextLabel = Instance.new("TextLabel")
	local Inner = Instance.new("Frame")
	local MainC_2 = Instance.new("UICorner")
	local Fill = Instance.new("Frame")
	local MainC_3 = Instance.new("UICorner")

	Loading.Name = "Loading"
	Loading.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
	Loading.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	Loading.ResetOnSpawn = false

	Main.Name = "Main"
	Main.Parent = Loading
	Main.BackgroundColor3 = Color3.fromRGB(21, 21, 21)
	Main.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Main.BorderSizePixel = 0
	Main.Position = UDim2.new(0.421630085, 0, 0.434838712, 0)
	Main.Size = UDim2.new(0, 300, 0, 100)

	MainC.CornerRadius = UDim.new(0, 6)
	MainC.Name = "MainC"
	MainC.Parent = Main

	TextLabel.Parent = Main
	TextLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	TextLabel.BackgroundTransparency = 1.000
	TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TextLabel.BorderSizePixel = 0
	TextLabel.Position = UDim2.new(0.0500000007, 0, 0.0700000003, 0)
	TextLabel.Size = UDim2.new(0, 268, 0, 30)
	TextLabel.Font = Enum.Font.GothamBold
	TextLabel.Text = "Loading Contents Please Wait"
	TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	TextLabel.TextSize = 14.000

	Inner.Name = "Inner"
	Inner.Parent = Main
	Inner.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
	Inner.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Inner.BorderSizePixel = 0
	Inner.ClipsDescendants = true
	Inner.Position = UDim2.new(0.0335213207, 0, 0.680000007, 0)
	Inner.Size = UDim2.new(0, 279, 0, 24)

	MainC_2.CornerRadius = UDim.new(0, 6)
	MainC_2.Name = "MainC"
	MainC_2.Parent = Inner

	Fill.Name = "Fill"
	Fill.Parent = Inner
	Fill.BackgroundColor3 = Color3.fromRGB(0, 81, 255)
	Fill.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Fill.BorderSizePixel = 0
	Fill.Size = UDim2.new(0, 0, 0, 24)

	MainC_3.CornerRadius = UDim.new(0, 6)
	MainC_3.Name = "MainC"
	MainC_3.Parent = Fill
	
	while Fill.Size.X.Offset < 279 do
		
		local Random = math.random(1, 5)
		
		if Random == 5 then
			
			task.wait(.2)
			
		end
		
		Utilities:Tween(Fill, 1, {Size = UDim2.new(0, Fill.Size.X.Offset + 20, 0, 24)})
		
		task.wait()
		
	end
	
	Main:Destroy()
	
end

function Library:Init(Name, UIVersion, Load)
	
	if Load then
		
		Utilities:Load()
		
	end


	
	assert(Name, "A name is required")

	local Celestial = Instance.new("ScreenGui")
	local Main = Instance.new("Frame")
	local MainC = Instance.new("UICorner")
	local Strip = Instance.new("Frame")
	local Title = Instance.new("TextLabel")
	local Exit = Instance.new("ImageButton")
	local Minimize = Instance.new("ImageButton")
	local Side = Instance.new("Frame")
	local SideC = Instance.new("UICorner")
	local TabHolder = Instance.new("ScrollingFrame")
	local TabHolderLL = Instance.new("UIListLayout")
	local TabHolderP = Instance.new("UIPadding")

	Celestial.Name = "Celestial"
	Celestial.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
	Celestial.ResetOnSpawn = false

	Main.Name = "Main"
	Main.Parent = Celestial
	Main.Active = true
	Main.BackgroundColor3 = Color3.fromRGB(21, 21, 21)
	Main.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Main.BorderSizePixel = 0
	Main.ClipsDescendants = true
	Main.Position = UDim2.new(0, 692, 0, 213)
	Main.Size = UDim2.new(0, 530, 0, 348)

	MainC.CornerRadius = UDim.new(0, 6)
	MainC.Name = "MainC"
	MainC.Parent = Main

	Strip.Name = "Strip"
	Strip.Parent = Main
	Strip.BackgroundColor3 = Color3.fromRGB(0, 81, 255)
	Strip.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Strip.BorderSizePixel = 0
	Strip.Position = UDim2.new(0, 0, 0, 35)
	Strip.Size = UDim2.new(0, 530, 0, 1)

	Title.Name = "Title"
	Title.Parent = Main
	Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Title.BackgroundTransparency = 1.000
	Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Title.BorderSizePixel = 0
	Title.Position = UDim2.new(0, 2, 0, 6)
	Title.Size = UDim2.new(0, 80, 0, 21)
	Title.Font = Enum.Font.GothamBold
	Title.Text = string.format("  %s", Name)
	Title.TextColor3 = Color3.fromRGB(255, 255, 255)
	Title.TextSize = 16.000
	Title.TextXAlignment = Enum.TextXAlignment.Left
	
	if UIVersion then
		
		local Version = Instance.new("TextLabel")

		Version.Name = "Version"
		Version.Parent = Main
		Version.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Version.BackgroundTransparency = 1.000
		Version.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Version.BorderSizePixel = 0
		Version.Position = UDim2.new(0, 80, 0, 6)
		Version.Size = UDim2.new(0, 41, 0, 21)
		Version.Font = Enum.Font.GothamBold
		Version.Text = UIVersion
		Version.TextColor3 = Color3.fromRGB(0, 81, 255)
		Version.TextSize = 16.000
		Version.TextXAlignment = Enum.TextXAlignment.Left
		
	end

	Exit.Name = "Exit"
	Exit.Parent = Main
	Exit.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Exit.BackgroundTransparency = 1.000
	Exit.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Exit.BorderSizePixel = 0
	Exit.Position = UDim2.new(0, 498, 0, 3)
	Exit.Size = UDim2.new(0, 25, 0, 25)
	Exit.Image = "rbxassetid://17484949231"

	Minimize.Name = "Minimize"
	Minimize.Parent = Main
	Minimize.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Minimize.BackgroundTransparency = 1.000
	Minimize.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Minimize.BorderSizePixel = 0
	Minimize.Position = UDim2.new(0, 467, 0, 3)
	Minimize.Size = UDim2.new(0, 25, 0, 25)
	Minimize.Image = "rbxassetid://17484965771"

	Side.Name = "Side"
	Side.Parent = Main
	Side.Active = true
	Side.BackgroundColor3 = Color3.fromRGB(21, 21, 21)
	Side.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Side.BorderSizePixel = 0
	Side.Position = UDim2.new(0, 2, 0, 36)
	Side.Size = UDim2.new(0, 129, 0, 312)

	SideC.CornerRadius = UDim.new(0, 6)
	SideC.Name = "SideC"
	SideC.Parent = Side

	TabHolder.Name = "TabHolder"
	TabHolder.Parent = Side
	TabHolder.Active = true
	TabHolder.BackgroundColor3 = Color3.fromRGB(21, 21, 21)
	TabHolder.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TabHolder.BorderSizePixel = 0
	TabHolder.Position = UDim2.new(0, 0, 0, 6)
	TabHolder.Size = UDim2.new(0, 125, 0, 299)
	TabHolder.ScrollBarThickness = 0

	TabHolderLL.Name = "TabHolderLL"
	TabHolderLL.Parent = TabHolder
	TabHolderLL.SortOrder = Enum.SortOrder.LayoutOrder
	TabHolderLL.Padding = UDim.new(0, 5)

	TabHolderP.Name = "TabHolderP"
	TabHolderP.Parent = TabHolder
	TabHolderP.PaddingLeft = UDim.new(0, 4)
	TabHolderP.PaddingTop = UDim.new(0, 7)
	
	TabHolderLL:GetPropertyChangedSignal"AbsoluteContentSize":Connect(function()
		
		TabHolder.CanvasSize = UDim2.new(0, 0, 0, TabHolderLL.AbsoluteContentSize.Y + 14)
		
	end)

	
	Utilities:Drag(Main)
	
	Minimize.MouseButton1Click:Connect(function()
		
		Utilities:Minimize(Main)
		
	end)
	
	Exit.MouseButton1Click:Connect(function()
		
		Utilities:Minimize(Main, true)
		
	end)
	
	local Tabs = {}
	
	function Tabs:Tab(Name, IconID)
		
		assert(Name, "A name is required")
		
		local Tab = Instance.new("TextButton")
		local Title = Instance.new("TextLabel")
		local Icon = Instance.new("ImageLabel")
		local TabC = Instance.new("UICorner")
		local TabLine = Instance.new("Frame")
		local Holder = Instance.new("ScrollingFrame")
		local HolderLL = Instance.new("UIListLayout")
		local HolderP = Instance.new("UIPadding")

		Tab.Name = "Tab"
		Tab.Parent = TabHolder
		Tab.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
		Tab.BorderSizePixel = 0
		Tab.Size = UDim2.new(0, 119, 0, 31)
		Tab.ZIndex = 3
		Tab.AutoButtonColor = false
		Tab.Font = Enum.Font.Gotham
		Tab.Text = ""
		Tab.TextSize = 14.000

		Title.Name = "Title"
		Title.Parent = Tab
		Title.AnchorPoint = Vector2.new(0, 0.5)
		Title.BackgroundTransparency = 1.000
		Title.Position = UDim2.new(-0.0780716613, 40, 0.483872145, 0)
		Title.Size = UDim2.new(0.103282258, 76, 0.645159662, 0)
		Title.ZIndex = 3
		Title.Font = Enum.Font.GothamMedium
		Title.Text = Name
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		Title.TextSize = 14.000
		Title.TextXAlignment = Enum.TextXAlignment.Left

		Icon.Name = "Icon"
		Icon.Parent = Tab
		Icon.AnchorPoint = Vector2.new(0, 0.5)
		Icon.BackgroundTransparency = 1.000
		Icon.Position = UDim2.new(-0.050999999, 12, 0.5, 0)
		Icon.Size = UDim2.new(0, 19, 0, 19)
		Icon.ZIndex = 3
		Icon.Image = string.format("rbxassetid://%s", IconID)
		Icon.ScaleType = Enum.ScaleType.Fit

		TabC.CornerRadius = UDim.new(0, 3)
		TabC.Name = "TabC"
		TabC.Parent = Tab
		
		TabLine.Name = "TabLine"
		TabLine.Parent = Tab
		TabLine.BackgroundColor3 = Color3.fromRGB(0, 81, 255)
		TabLine.BorderColor3 = Color3.fromRGB(0, 0, 0)
		TabLine.BorderSizePixel = 0
		TabLine.Position = UDim2.new(0.00277325278, 0, 0.934999526, 0)
		TabLine.Size = UDim2.new(0, 0, 0, 1)
		TabLine.ZIndex = 4
		
		Holder.Name = "Holder"
		Holder.Parent = Main
		Holder.Active = true
		Holder.BackgroundColor3 = Color3.fromRGB(21, 21, 21)
		Holder.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Holder.BorderSizePixel = 0
		Holder.Position = UDim2.new(0, 140, 0, 41)
		Holder.Size = UDim2.new(0, 383, 0, 299)
		Holder.ScrollBarThickness = 3
		Holder.Visible = false
		Holder.ScrollBarImageColor3 = Color3.fromRGB(47, 47, 47)

		HolderLL.Name = "HolderLL"
		HolderLL.Parent = Holder
		HolderLL.SortOrder = Enum.SortOrder.LayoutOrder
		HolderLL.Padding = UDim.new(0, 6)

		HolderP.Name = "HolderP"
		HolderP.Parent = Holder
		HolderP.PaddingTop = UDim.new(0, 6)
		
		HolderLL:GetPropertyChangedSignal"AbsoluteContentSize":Connect(function()
			
			Holder.CanvasSize = UDim2.new(0, 0, 0, HolderLL.AbsoluteContentSize.Y + 14)
			
		end)
		
		if not Library.CurrentTab then
			
			Utilities:ChangeTab(Tab, Holder)
			
		end
		
		Tab.MouseButton1Click:Connect(function()
			
			Utilities:ChangeTab(Tab, Holder)
			
		end)
		
		local Sections = {}
		
		function Sections:Section(Name)
			
			local Section = Instance.new("Frame")
			local SectionC = Instance.new("UICorner")
			local Title = Instance.new("TextLabel")
			local TitleLine = Instance.new("Frame")
			local SectionP = Instance.new("UIPadding")
			local SectionLL = Instance.new("UIListLayout")

			Section.Name = "Section"
			Section.Parent = Holder
			Section.Active = true
			Section.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
			Section.BorderColor3 = Color3.fromRGB(0, 0, 0)
			Section.BorderSizePixel = 0
			Section.Position = UDim2.new(0, 0, 0, -153)
			Section.Size = UDim2.new(0, 370, 0, 370)

			SectionC.CornerRadius = UDim.new(0, 5)
			SectionC.Name = "SectionC"
			SectionC.Parent = Section

			Title.Name = "Title"
			Title.Parent = Section
			Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			Title.BackgroundTransparency = 1.000
			Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
			Title.BorderSizePixel = 0
			Title.Size = UDim2.new(0, 376, 0, 26)
			Title.Font = Enum.Font.GothamBold
			Title.Text = Name
			Title.TextColor3 = Color3.fromRGB(255, 255, 255)
			Title.TextSize = 14.000
			Title.TextXAlignment = Enum.TextXAlignment.Left
			Title.TextYAlignment = Enum.TextYAlignment.Top

			TitleLine.Name = "TitleLine"
			TitleLine.Parent = Title
			TitleLine.BackgroundColor3 = Color3.fromRGB(0, 81, 255)
			TitleLine.BorderColor3 = Color3.fromRGB(0, 0, 0)
			TitleLine.BorderSizePixel = 0
			TitleLine.Position = UDim2.new(0, 0, 0, 17)
			TitleLine.Size = UDim2.new(0, 164, 0, 1)

			SectionP.Name = "SectionP"
			SectionP.Parent = Section
			SectionP.PaddingLeft = UDim.new(0, 6)
			SectionP.PaddingTop = UDim.new(0, 6)

			SectionLL.Name = "SectionLL"
			SectionLL.Parent = Section
			SectionLL.SortOrder = Enum.SortOrder.LayoutOrder
			SectionLL.Padding = UDim.new(0, 6)
			
			SectionLL:GetPropertyChangedSignal"AbsoluteContentSize":Connect(function()
				
				Section.Size = UDim2.new(0, 370, 0, SectionLL.AbsoluteContentSize.Y + 14)
				
			end)
			
			local Components = {}
			
			function Components:Button(Name, CallBack)
				
				Name, CallBack = Name or "Button", CallBack or function() end
				
				local Button = Instance.new("TextButton")
				local ButtonC = Instance.new("UICorner")

				Button.Name = "Button"
				Button.Parent = Section
				Button.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				Button.BorderColor3 = Color3.fromRGB(47, 47, 47)
				Button.BorderSizePixel = 0
				Button.Position = UDim2.new(0, 0, 0, 47)
				Button.Size = UDim2.new(0, 358, 0, 31)
				Button.AutoButtonColor = false
				Button.Font = Enum.Font.Gotham
				Button.Text = string.format("  %s", Name)
				Button.TextColor3 = Color3.fromRGB(255, 255, 255)
				Button.TextSize = 12.000
				Button.TextXAlignment = Enum.TextXAlignment.Left

				ButtonC.CornerRadius = UDim.new(0, 4)
				ButtonC.Name = "ButtonC"
				ButtonC.Parent = Button
				
				Button.MouseButton1Click:Connect(function()
					
					task.spawn(CallBack)
					Utilities:ButtonAnimation(Button)
					
				end)
				
				return Button
				
			end
			
			function Components:Toggle(Name, Default, CallBack)
				
				Name, Default, CallBack = Name or "Toggle", Default or false, CallBack or function() end
				
				local Toggle = Instance.new("TextButton")
				local ToggleC = Instance.new("UICorner")
				local Inner = Instance.new("Frame")
				local InnerC = Instance.new("UICorner")
				local Circle = Instance.new("Frame")
				local CircleC = Instance.new("UICorner")

				Toggle.Name = "Toggle"
				Toggle.Parent = Section
				Toggle.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				Toggle.BorderColor3 = Color3.fromRGB(47, 47, 47)
				Toggle.BorderSizePixel = 0
				Toggle.Position = UDim2.new(0, 0, 0, 47)
				Toggle.Size = UDim2.new(0, 358, 0, 31)
				Toggle.AutoButtonColor = false
				Toggle.Font = Enum.Font.Gotham
				Toggle.Text = string.format("  %s", Name)
				Toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
				Toggle.TextSize = 12.000
				Toggle.TextXAlignment = Enum.TextXAlignment.Left

				ToggleC.CornerRadius = UDim.new(0, 4)
				ToggleC.Name = "ToggleC"
				ToggleC.Parent = Toggle

				Inner.Name = "Inner"
				Inner.Parent = Toggle
				Inner.BackgroundColor3 = Color3.fromRGB(21, 21, 21)
				Inner.BorderSizePixel = 0
				Inner.Position = UDim2.new(0.8436535, 0, 0.179000363, 0)
				Inner.Size = UDim2.new(0, 49, 0, 19)
				Inner.ZIndex = 3

				InnerC.CornerRadius = UDim.new(0, 4)
				InnerC.Name = "InnerC"
				InnerC.Parent = Inner

				Circle.Name = "Circle"
				Circle.Parent = Inner
				Circle.BackgroundColor3 = Color3.fromRGB(255, 89, 89)
				Circle.BorderSizePixel = 0
				Circle.Position = UDim2.new(0, 3, 0.158000007, 0)
				Circle.Size = UDim2.new(0, 21, 0, 13)
				Circle.ZIndex = 3

				CircleC.CornerRadius = UDim.new(0, 3)
				CircleC.Name = "CircleC"
				CircleC.Parent = Circle
				
				local ToggleColors = {
					
					[true] = Color3.fromRGB(91, 154, 76),
					[false] = Color3.fromRGB(255, 89, 89)
					
				}
				
				local Funcs, CurrentState = {}, false
				
				function Funcs.SetState(self, State)
					
					State = State or not CurrentState
					
					if State == CurrentState then
						
						return false, warn"state already set"
						
					end
					
					CurrentState = State
					
					Utilities:Tween(Circle, .5, {Position = UDim2.new(0, (State and 24) or 3, 0.158, 0), BackgroundColor3 = ToggleColors[State]})
					
					CallBack(State)
				
				end
				
				if Default then
				
					Funcs:SetState(Default)
					
				end
				
				Toggle.MouseButton1Click:Connect(function()
					
					Funcs:SetState()
					
				end)
				
				return Funcs
				
			end
			
			function Components:Slider(Name, Default, Min, Max, CallBack)
				
				Name, Default, Min, Max, CallBack = Name or "Slider", Default or 1, Min or 1, Max or 100, CallBack or function() end
				
				local Slider = Instance.new("TextButton")
				local ButtonC = Instance.new("UICorner")
				local Title = Instance.new("TextLabel")
				local Number = Instance.new("TextBox")
				local Inner = Instance.new("Frame")
				local InnerC = Instance.new("UICorner")
				local Fill = Instance.new("Frame")
				local FillC = Instance.new("UICorner")

				Slider.Name = "Slider"
				Slider.Parent = Section
				Slider.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				Slider.BorderColor3 = Color3.fromRGB(47, 47, 47)
				Slider.BorderSizePixel = 0
				Slider.Position = UDim2.new(0, 0, 0, 158)
				Slider.Size = UDim2.new(0, 358, 0, 31)
				Slider.AutoButtonColor = false
				Slider.Font = Enum.Font.Gotham
				Slider.Text = ""
				Slider.TextColor3 = Color3.fromRGB(255, 255, 255)
				Slider.TextSize = 12.000
				Slider.TextXAlignment = Enum.TextXAlignment.Left

				ButtonC.CornerRadius = UDim.new(0, 4)
				ButtonC.Name = "ButtonC"
				ButtonC.Parent = Slider

				Title.Name = "Title"
				Title.Parent = Slider
				Title.BackgroundTransparency = 1.000
				Title.Position = UDim2.new(0, 0, 0, 7)
				Title.Size = UDim2.new(0, 125, 0, 18)
				Title.ZIndex = 3
				Title.Font = Enum.Font.Gotham
				Title.Text = string.format("  %s", Name)
				Title.TextColor3 = Color3.fromRGB(255, 255, 255)
				Title.TextSize = 13.000
				Title.TextTransparency = 0.100
				Title.TextXAlignment = Enum.TextXAlignment.Left

				Number.Name = "Number"
				Number.Parent = Slider
				Number.BackgroundTransparency = 1.000
				Number.BorderSizePixel = 0
				Number.Position = UDim2.new(0, 327, 0, 8)
				Number.Size = UDim2.new(0, 24, 0, 16)
				Number.ZIndex = 3
				Number.ClearTextOnFocus = true
				Number.Font = Enum.Font.GothamMedium
				Number.Text = "100"
				Number.TextColor3 = Color3.fromRGB(255, 255, 255)
				Number.TextSize = 12.000
				Number.TextXAlignment = Enum.TextXAlignment.Right

				Inner.Name = "Inner"
				Inner.Parent = Slider
				Inner.BackgroundColor3 = Color3.fromRGB(21, 21, 21)
				Inner.BorderSizePixel = 0
				Inner.Position = UDim2.new(0, 131, 0, 12)
				Inner.Size = UDim2.new(0, 190, 0, 8)
				Inner.ZIndex = 3

				InnerC.CornerRadius = UDim.new(0, 10)
				InnerC.Name = "InnerC"
				InnerC.Parent = Inner

				Fill.Name = "Fill"
				Fill.Parent = Inner
				Fill.BackgroundColor3 = Color3.fromRGB(0, 81, 255)
				Fill.BorderSizePixel = 0
				Fill.Position = UDim2.new(0.000124318976, 0, 0, 0)
				Fill.Size = UDim2.new(0.537774205, 0, 0.500001431, 4)
				Fill.ZIndex = 3

				FillC.CornerRadius = UDim.new(0, 10)
				FillC.Name = "FillC"
				FillC.Parent = Fill
				
				local Funcs = {}
				
				function Funcs.SetValue(self, Value)
					
					local Percent = (Mouse.X - Inner.AbsolutePosition.X) / Inner.AbsoluteSize.X

					if Value then
						
						Percent = (Value - Min) / (Max - Min)
						
					end

					Percent = math.clamp(Percent, 0, 1)

					Value = Value or math.floor(Min + (Max - Min) * Percent)

					Number.Text = tostring(Value)

					Utilities:Tween(Fill, .1, {Size = UDim2.new(Percent, 0, 1, 0)})

					CallBack(tonumber(Value))
					
				end
				
				Funcs:SetValue(Default)
				
				local Dragging, BoxFocused, Allowed = false, false, {[""] = true, ["-"] = true}
				
				Inner.InputBegan:Connect(function(Input)
					
					if Input.UserInputType == Enum.UserInputType.MouseButton1 then
						
						Funcs:SetValue()
						Dragging = true
						
					end
					
				end)
				
				UserInputService.InputEnded:Connect(function(Input)
					
					if Dragging and Input.UserInputType == Enum.UserInputType.MouseButton1 then
						
						Dragging = false
					
					end
					
				end)
				
				UserInputService.InputChanged:Connect(function(Input)
					
					if Dragging and Input.UserInputType == Enum.UserInputType.MouseMovement then
						
						Funcs:SetValue()
						
					end
					
				end)
				
				Number.Focused:Connect(function()
					
					BoxFocused = true
					
				end)

				Number.FocusLost:Connect(function()
					
					if not tonumber(Number.Text) then
						
						Number.Text = Default
						
					end

					if tonumber(Number.Text) < Min then
						
						Funcs:SetValue(Min)
						
					end

					BoxFocused = false
					
				end)

				Number:GetPropertyChangedSignal"Text":Connect(function()
					
					if not BoxFocused then
						
						return
							
					end

					if Number.Text == "" then
						
						return
							
					end

					local text = Number.Text

					if not tonumber(Number.Text) then 
						
						Number.Text = ""
						
					end

					if tonumber(Number.Text) > Max then
						
						Funcs:SetValue(Max)
						
					end
					
					Funcs:SetValue(tonumber(Number.Text))
					
				end)
					
			end
			
			function Components:TextBox(Name, Default, CallBack)
				
				Name, Default, CallBack = Name or "TextBox", Default or "Text", CallBack or function() end
				
				local TextBox = Instance.new("TextButton")
				local TextBoxC = Instance.new("UICorner")
				local Input = Instance.new("TextBox")
				local InputC = Instance.new("UICorner")

				TextBox.Name = "TextBox"
				TextBox.Parent = Section
				TextBox.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				TextBox.BorderColor3 = Color3.fromRGB(47, 47, 47)
				TextBox.BorderSizePixel = 0
				TextBox.Position = UDim2.new(0, 0, 0, 47)
				TextBox.Size = UDim2.new(0, 358, 0, 31)
				TextBox.AutoButtonColor = false
				TextBox.Font = Enum.Font.Gotham
				TextBox.Text = string.format("  %s", Name)
				TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
				TextBox.TextSize = 12.000
				TextBox.TextXAlignment = Enum.TextXAlignment.Left

				TextBoxC.CornerRadius = UDim.new(0, 4)
				TextBoxC.Name = "TextBoxC"
				TextBoxC.Parent = TextBox

				Input.Name = "Input"
				Input.Parent = TextBox
				Input.BackgroundColor3 = Color3.fromRGB(21, 21, 21)
				Input.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Input.BorderSizePixel = 0
				Input.Position = UDim2.new(0.796167493, 0, 0.179000363, 0)
				Input.Size = UDim2.new(0, 65, 0, 19)
				Input.Font = Enum.Font.Gotham
				Input.Text = Default
				Input.TextColor3 = Color3.fromRGB(255, 255, 255)
				Input.TextSize = 12.000
				Input.TextWrapped = true

				InputC.CornerRadius = UDim.new(0, 4)
				InputC.Name = "InputC"
				InputC.Parent = Input
				
				Input.FocusLost:Connect(function()
					
					if Input.Text == "" then
						
						Input.Text = Default
						
						
					end

					CallBack(Input.Text)
					
				end)
				
			end
			
			function Components:KeyBind(Name, Default, CallBack)
				
				Name, Default, CallBack = Name or "KeyBind", Default or "None", CallBack or function() end
				
				Default = (typeof(Default) == "string" and Enum.KeyCode[Default] or Default)

				local KeyTxt, BindKey = (Default and (ShortNames[Default.Name] or Default.Name) or "None"), Default
				
				local KeyBind = Instance.new("TextButton")
				local KeyBindC = Instance.new("UICorner")
				local Input = Instance.new("TextButton")
				local InputC = Instance.new("UICorner")

				KeyBind.Name = "KeyBind"
				KeyBind.Parent = Section
				KeyBind.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				KeyBind.BorderColor3 = Color3.fromRGB(47, 47, 47)
				KeyBind.BorderSizePixel = 0
				KeyBind.Position = UDim2.new(0, 0, 0, 47)
				KeyBind.Size = UDim2.new(0, 358, 0, 31)
				KeyBind.AutoButtonColor = false
				KeyBind.Font = Enum.Font.Gotham
				KeyBind.Text = string.format("  %s", Name)
				KeyBind.TextColor3 = Color3.fromRGB(255, 255, 255)
				KeyBind.TextSize = 12.000
				KeyBind.TextXAlignment = Enum.TextXAlignment.Left

				KeyBindC.CornerRadius = UDim.new(0, 4)
				KeyBindC.Name = "KeyBindC"
				KeyBindC.Parent = KeyBind

				Input.Name = "Input"
				Input.Parent = KeyBind
				Input.BackgroundColor3 = Color3.fromRGB(21, 21, 21)
				Input.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Input.BorderSizePixel = 0
				Input.Position = UDim2.new(0.796167493, 0, 0.179000363, 0)
				Input.Size = UDim2.new(0, 65, 0, 19)
				Input.Font = Enum.Font.Gotham
				Input.Text = KeyTxt
				Input.TextColor3 = Color3.fromRGB(255, 255, 255)
				Input.TextSize = 12.000
				Input.TextWrapped = true
				Input.AutoButtonColor = false

				InputC.CornerRadius = UDim.new(0, 4)
				InputC.Name = "InputC"
				InputC.Parent = Input
				
				Connections[#Connections + 1] = UserInputService.InputBegan:Connect(function(Input, Typing)
					
					if Typing or Input.KeyCode ~= BindKey then
						
						return
						
					end
					
					CallBack(BindKey.Name)
					
				end)
				
				Input.MouseButton1Click:Connect(function()
					
					Input.Text = "..."

					task.wait()

					local Key = UserInputService.InputEnded:Wait()

					if Key.UserInputType ~= Enum.UserInputType.Keyboard then
						
						Input.Text = KeyTxt
						
						return
							
					end

					if BannedKeys[tostring(Key.KeyCode.Name)] then
						
						Input.Text = KeyTxt
						
						return
							
					end

					BindKey = Enum.KeyCode[tostring(Key.KeyCode.Name)]

					Input.Text = ShortNames[tostring(Key.KeyCode.Name)] or tostring(Key.KeyCode.Name)
					
				end)
				
			end
			
			function Components:DropDown(Name, Options, Multi, CallBack)
				
				Name, Options, Multi, CallBack = Name or "DropDown", Options or {}, Multi or false, CallBack or function() end
				
				local Container = Instance.new("TextButton")
				local ContainerC = Instance.new("UICorner")
				local Dropdown = Instance.new("TextButton")
				local DropDownC = Instance.new("UICorner")
				local Toggle = Instance.new("TextButton")
				local Search = Instance.new("TextBox")
				local SearchP = Instance.new("UIPadding")
				local ContainerLL = Instance.new("UIListLayout")

				Container.Name = "Container"
				Container.Parent = Section
				Container.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				Container.BackgroundTransparency = 1.000
				Container.BorderColor3 = Color3.fromRGB(47, 47, 47)
				Container.BorderSizePixel = 0
				Container.Position = UDim2.new(0, 0, 0, 32)
				Container.Size = UDim2.new(0, 358, 0, 30)
				Container.AutoButtonColor = false
				Container.Font = Enum.Font.Gotham
				Container.Text = ""
				Container.TextColor3 = Color3.fromRGB(255, 255, 255)
				Container.TextSize = 12.000
				Container.TextXAlignment = Enum.TextXAlignment.Left
				Container.ClipsDescendants = true

				ContainerC.CornerRadius = UDim.new(0, 4)
				ContainerC.Name = "ContainerC"
				ContainerC.Parent = Container

				Dropdown.Name = "Dropdown"
				Dropdown.Parent = Container
				Dropdown.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				Dropdown.BorderColor3 = Color3.fromRGB(47, 47, 47)
				Dropdown.BorderSizePixel = 0
				Dropdown.Position = UDim2.new(-0.0167597774, 0, 0, 0)
				Dropdown.Size = UDim2.new(0, 358, 0, 30)
				Dropdown.AutoButtonColor = false
				Dropdown.Font = Enum.Font.Gotham
				Dropdown.Text = ""
				Dropdown.TextColor3 = Color3.fromRGB(255, 255, 255)
				Dropdown.TextSize = 12.000
				Dropdown.TextXAlignment = Enum.TextXAlignment.Left

				DropDownC.CornerRadius = UDim.new(0, 4)
				DropDownC.Name = "DropDownC"
				DropDownC.Parent = Dropdown

				Toggle.Name = "Toggle"
				Toggle.Parent = Dropdown
				Toggle.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				Toggle.BackgroundTransparency = 1.000
				Toggle.BorderColor3 = Color3.fromRGB(47, 47, 47)
				Toggle.BorderSizePixel = 0
				Toggle.Position = UDim2.new(0.918994427, 0, 0, 0)
				Toggle.Size = UDim2.new(0, 29, 0, 30)
				Toggle.AutoButtonColor = false
				Toggle.Font = Enum.Font.GothamBold
				Toggle.Text = "+"
				Toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
				Toggle.TextSize = 14.000

				Search.Name = "Search"
				Search.Parent = Dropdown
				Search.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				Search.BackgroundTransparency = 1.000
				Search.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Search.BorderSizePixel = 0
				Search.Position = UDim2.new(0, 0, 0.0333333351, 0)
				Search.Size = UDim2.new(0, 321, 0, 30)
				Search.Font = Enum.Font.Gotham
				Search.Text = Name
				Search.TextColor3 = Color3.fromRGB(255, 255, 255)
				Search.TextSize = 12.000
				Search.TextXAlignment = Enum.TextXAlignment.Left

				SearchP.Name = "SearchP"
				SearchP.Parent = Search
				SearchP.PaddingLeft = UDim.new(0, 5)

				ContainerLL.Name = "ContainerLL"
				ContainerLL.Parent = Container
				ContainerLL.SortOrder = Enum.SortOrder.LayoutOrder
				ContainerLL.Padding = UDim.new(0, 6)
				
				local IsOpen
				local function Open()
					
					IsOpen = not IsOpen
					Utilities:Tween(Container, .5, {Size = UDim2.new(0, 358,0, (IsOpen and (40 * #Options)) or 30)})
					
				end
				
				local function ShowAll()
					
					for i, v in next, Container:GetChildren() do
						
						if v.Name == "Option" then
							
							v.Visible = true
							
						end
						
					end
					
				end
				
				local function SearchOption(text)
					
					if text == "" then
						
						ShowAll()
						
					end

					for i,v in next, Container:GetChildren() do
						
						if v.Name == "Option" then
							
							v.Visible = v.Text:lower():match(text:lower()) and true or false
							
						end
						
					end
					
				end
				
				Toggle.MouseButton1Click:Connect(function()
					
					Open()
					Toggle.Text = (Toggle.Text == "+" and "-" or "+")
					
				end)
				
				local Funcs, MultiOptions, IsSearching = {}, {}, false
				
				local function RefreshList()
					
					local NewList = {}
					
					for i,v in next, MultiOptions do
						table.insert(NewList, v)
					end

					for i,v in next, Options do
						if not table.find(NewList, v) then
							table.insert(NewList, v)
						end
					end
					return NewList
					
				end
				
				function Funcs.AddOption(self, OptionName)
					
					assert(Name, "A name is required")
					
					local Option = Instance.new("TextButton")
					local OptionC = Instance.new("UICorner")

					Option.Name = "Option"
					Option.Parent = Container
					Option.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
					Option.BorderColor3 = Color3.fromRGB(47, 47, 47)
					Option.BorderSizePixel = 0
					Option.Position = UDim2.new(0, 0, 0.282258064, 0)
					Option.Size = UDim2.new(0, 358, 0, 25)
					Option.AutoButtonColor = false
					Option.Font = Enum.Font.Gotham
					Option.Text = OptionName
					Option.TextColor3 = table.find(MultiOptions, OptionName) and Color3.fromRGB(91, 154, 76) or Multi and Color3.fromRGB(255, 89, 89) or Color3.fromRGB(255, 255, 255)
					Option.TextSize = 12.000

					OptionC.CornerRadius = UDim.new(0, 4)
					OptionC.Name = "OptionC"
					OptionC.Parent = Option
					
					Option.MouseButton1Click:Connect(function()
						
						if not Multi then
							
							Search.Text = Option.Text
							CallBack(Option.Text)
							Open()
							
						else
							
						if table.find(MultiOptions, Option.Text) then
							
							table.remove(MultiOptions, table.find(MultiOptions, Option.Text))
							
						else
							
							table.insert(MultiOptions, Option.Text)
								
						end
							
							Funcs:SetOptions(RefreshList())

							CallBack(MultiOptions)
							
							Search.Text = "Selected - "
							
							for i, v in next, MultiOptions do
								
								Search.Text = (i == 1 and Search.Text..v) or Search.Text..", "..v
								
							end
							
							if not MultiOptions[1] then

								Search.Text = Name
								ShowAll()

								return

							end
							
						end
						
					end)
					
				end
				
				function Funcs.ClearOptions(self)
					
					for i, v in next, Container:GetChildren() do
						
						if v.Name == "Option" then
							
							v:Destroy()
							
						end
						
					end
					
				end
				
				function Funcs.SetOptions(self, Options)
					
					Funcs:ClearOptions()
					
					for i, v in next, Options do
						
						Funcs:AddOption(v)
					
					end
					
				end
				
				Search.Focused:Connect(function()
					
					IsSearching = true
					
				end)
				
				Search.FocusLost:Connect(function()
					
					if Search.Text == "" and Multi and MultiOptions[1] then
						
						for i, v in next, MultiOptions do

							Search.Text = (i == 1 and Search.Text..v) or Search.Text..", "..v

						end
						
					end

					if Search.Text == "" then
						
						Search.Text = Name
						
					end

					if Search.Text:sub(1, 8) == "Selected" then
						
						return
							
					end

					IsSearching = false
					
				end)
				
				Search:GetPropertyChangedSignal("Text"):Connect(function()
					
					if not (IsOpen or IsSearching) then
						
						return
							
					end

					if Search.Text == Name or Search.Text == "" or Search.Text:sub(1, 8) == "Selected" then
						
						return ShowAll()
						
					end

					SearchOption(Search.Text)
					
				end)
				
				Funcs:SetOptions(Options)
				
				return Funcs
				
			end
			
			function Components:Title(Message)
				
				assert(Message, "A message is required")
				
				local Title = Instance.new("TextLabel")

				Title.Name = "Title"
				Title.Parent = Section
				Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Title.BackgroundTransparency = 1.000
				Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Title.BorderSizePixel = 0
				Title.Size = UDim2.new(0, 376, 0, 26)
				Title.Font = Enum.Font.GothamBold
				Title.Text = Message
				Title.TextColor3 = Color3.fromRGB(255, 255, 255)
				Title.TextSize = 14.000
				Title.TextXAlignment = Enum.TextXAlignment.Left
				
				return Title
				
			end
			
			return Components
			
		end
		
		return Sections
		
	end
		
	return Tabs
	
end

-->Variables<--

-->Services<--
local Workspace, Players, ReplicatedStorage, Lighting, UserInputService , RunService  = game:GetService("Workspace"), game:GetService("Players"), game:GetService("ReplicatedStorage"), game:GetService("Lighting"), game:GetService("UserInputService"),  game:GetService("RunService")


local defaultTime, flingPower, walkingSpeed, sprintingSpeed, Player, Humanoid = Lighting.TimeOfDay, 100, 16, 32, game.Players.LocalPlayer, game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")

-->Booleans<--
local flingEnabled, autoGrabGunEnabled, sheriffchams, murdchams, isShiftPressed, isToggledOn, rainbowForceFieldEnabled, spectateMurdererEnabled, spectateMurdererConnection, spectateSheriffEnabled, spectateSheriffConnection, autoRejoinEnabled, autoUpdateGunStatusEnabled   = false, false, false, false, false, false, false, false, nil, false, nil, false, true 



local flinglist = {}
                 local playerlist = {}
                 local playerlistfe = {}
                 
                 
                 table.insert(flinglist,"All")
                 table.insert(playerlistfe,"All")
                 table.insert(playerlistfe,game.Players.LocalPlayer.Name)
                 
                 for i,v in pairs(game.Players:GetPlayers())do
                     if v ~= game.Players.LocalPlayer then
                         table.insert(flinglist,v.Name)
                         table.insert(playerlist,v.Name)
                         table.insert(playerlistfe,v.Name)
                     end
                 end
                 
                 game.Players.PlayerAdded:Connect(function(player)
                     local name = player.Name
                     table.insert(flinglist,name)
                     table.insert(playerlist,name)
                 end)
                 
                 game.Players.PlayerRemoving:Connect(function(player)
                     local name = player.Name
                     for i,v in pairs(flinglist)do
                         if v == name then  
                             table.remove(flinglist,i)
                         end
                     end
                     for i,v in pairs(playerlist)do
                         if v == name then  
                             table.remove(playerlist,i)
                         end
                     end
                     for i,v in pairs(playerlistfe)do
                         if v == name then  
                             table.remove(playerlistfe,i)
                         end
                     end
                 end)


local rainbowColors = {
	Color3.fromRGB(255, 0, 0),
	Color3.fromRGB(255, 165, 0),
	Color3.fromRGB(255, 255, 0),
	Color3.fromRGB(0, 255, 0),
	Color3.fromRGB(0, 127, 255),
	Color3.fromRGB(0, 0, 255),
	Color3.fromRGB(139, 0, 255)
}

local maplocations = {
    ["Secret Room"] = CFrame.new(-150.9770050048828, 152.88290405273438, 112.75166320800781),
    ["Voting Room"] = CFrame.new(-107.94659423828125, 140.54779052734375, 81.2223892211914),
    ["Spawn"] = CFrame.new(-108.3932876586914, 138.1329345703125, -3.875157356262207),
    ["Above Spawn"] = CFrame.new(-82.7715072631836, 507.6320495605469, 27.801353454589844)
}

local playerNames = {}
for _, player in ipairs(game.Players:GetPlayers()) do
	table.insert(playerNames, player.Name)
end

-->Functions<--

local Funcs = {}

 

function Funcs:updateRainbowForceField()
	local index = 1
	while rainbowForceFieldEnabled do
		for _, v in ipairs(game.Players.LocalPlayer.Character:GetChildren()) do
			if v:IsA("BasePart") then
				v.Material = Enum.Material.ForceField
				local goal = {Color = rainbowColors[index]}
				local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
				local tween = TweenService:Create(v, tweenInfo, goal)
				tween:Play()
			end
		end
		index = index % #rainbowColors + 1
		wait(0.5)  
	end
	
	for _, v in ipairs(game.Players.LocalPlayer.Character:GetChildren()) do
		if v:IsA("BasePart") then
			v.Material = Enum.Material.SmoothPlastic 
		end
	end
end


function Funcs:hasGun(player)
	return player.Character and (player.Character:FindFirstChild("Gun") or player.Backpack:FindFirstChild("Gun"))
end

function Funcs:teleporttosherrif()
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= Players.LocalPlayer and Funcs:hasGun(player) then
			Players.LocalPlayer.Character:MoveTo(player.Character.HumanoidRootPart.Position + Vector3.new(0, 0, 0))
			return
		end
	end
end

function Funcs:isMurderer(player)
	return player.Character and (player.Character:FindFirstChild("Knife") or player.Backpack:FindFirstChild("Knife"))
end

function Funcs:teleporttomurderer()
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= Players.LocalPlayer and Funcs:isMurderer(player) then
			Players.LocalPlayer.Character:MoveTo(player.Character.HumanoidRootPart.Position + Vector3.new(0, 1, 0))
			return
		end
	end
end

function Funcs:SetDaytime()
	Lighting.TimeOfDay = "12:00:00"
end

function Funcs:SetMidnight()
	Lighting.TimeOfDay = "00:00:00"
end

function Funcs:Light(Val)
	if Val == false then game.Players.LocalPlayer.Character.Head.PointLight:Destroy() return end
	local PL = Instance.new("PointLight",game.Players.LocalPlayer.Character:FindFirstChild("Head"))
	PL.Range = 100
	PL.Brightness = 1
	PL.Shadows = false
	end

function Funcs:XrayOn(obj)
	for _,v in pairs(obj:GetChildren()) do
		if (v:IsA("BasePart")) and not v.Parent:FindFirstChild("Humanoid") then
			v.LocalTransparencyModifier = 0.75;
		end;
		Funcs:XrayOn(v);
	end;
end;
	
function Funcs:XrayOff(obj)
	for _,v in pairs(obj:GetChildren()) do
		if (v:IsA("BasePart")) and not v.Parent:FindFirstChild("Humanoid") then
			v.LocalTransparencyModifier = 0;
		end ;
		Funcs:XrayOff(v);
	end;
end;

function Funcs:fling(power)
	local bambam = Instance.new("BodyThrust")
	bambam.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
	bambam.Force = Vector3.new(power, 0, power)
	bambam.Location = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
end

function Funcs:teleporttomap()
	local player = game.Players.LocalPlayer
	local Character = player.Character
	local CoinContainer = game.Workspace:FindFirstChild("CoinContainer", true)

	if Character and CoinContainer then
		local ClosestCoin = nil
		local MinDistance = math.huge

		for _, Coin in ipairs(CoinContainer:GetChildren()) do
			if Coin.Name == "Coin_Server" then
				local Distance = (Character.PrimaryPart.Position - Coin.Position).magnitude
				if Distance < MinDistance then
					MinDistance = Distance
					ClosestCoin = Coin
				end
			end
		end

		if ClosestCoin then
			local EndPosition = ClosestCoin.Position
			Character:SetPrimaryPartCFrame(CFrame.new(EndPosition))
		end
	end
end

 function Funcs:grabgun()
	local offset = CFrame.new(0, 2, 0)
	local character = game.Players.LocalPlayer.Character
	if character then
		local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
		if humanoidRootPart then
			local originalPosition = humanoidRootPart.Position
			local closestGun = nil
			local minDistance = math.huge
			for _, gun in ipairs(game:GetService("Workspace"):GetChildren()) do
				if gun:IsA("Part") and gun.Name:lower():find("gun") then
					local distance = (humanoidRootPart.Position - gun.Position).magnitude
					if distance < minDistance then
						closestGun = gun
						minDistance = distance
					end
				end
			end
			if closestGun and minDistance <= 500 then -- if you are in the spawn (meaning if ur dead) then it wont teleport
				humanoidRootPart.CFrame = closestGun.CFrame * offset
				wait(0.1) -- time in between the gun dropping and you teleporting
				humanoidRootPart.CFrame = character.HumanoidRootPart.CFrame
				wait(0.1)   -- time from teleporting to the gun and coming back
				humanoidRootPart.CFrame = CFrame.new(originalPosition)  -- teleport back 
			else
				
			end
		else
			
		end
	else
		
	end
end


function Funcs:autoGrabGun()
	while autoGrabGunEnabled do
		Funcs:grabgun()
		wait(1.5)  
	end
 end

function Funcs:spectateGun()
	local gun = nil
	local minDistance = math.huge
	for _, obj in ipairs(workspace:GetChildren()) do
		if obj:IsA("Part") and obj.Name:lower():find("gun") then
			local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - obj.Position).magnitude
			if distance < minDistance then
				gun = obj
				minDistance = distance
			end
		end
	end
	if gun then
		workspace.CurrentCamera.CameraSubject = gun
		ViewingGun = true
	else
		print("No gun found to spectate.")
	end
end

function Funcs:stopSpectatingGun()
	workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
	ViewingGun = false
end

function Funcs:sendMessage(message)
	ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "normalchat")
end

function Funcs:blurtMurderer()
    print("Checking for murderer...")
    local murderer = game.Players:FindFirstChild(Murder)
    if murderer then
        print("Murderer found:", murderer.Name)
        if Funcs:IsAlive(murderer) then
            Funcs:sendMessage("Murderer is: " .. Murder)
            print("Murderer is alive.")
        else
            print("Murderer found but not alive.")
        end
    else
        print("No player found as the murderer.")
    end
end

function Funcs:blurtSheriff()
    print("Checking for sheriff...")
    local sheriff = game.Players:FindFirstChild(Sheriff)
    if sheriff then
        print("Sheriff found:", sheriff.Name)
        if Funcs:IsAlive(sheriff) then
            Funcs:sendMessage("Sheriff is: " .. Sheriff)
            print("Sheriff is alive.")
        else
            print("Sheriff found but not alive.")
        end
    else
        print("No player found as the sheriff.")
    end
end

function Funcs:CreateHighlight()
	for i, v in pairs(Players:GetChildren()) do
		if v ~= game.Players.LocalPlayer and v.Character and not v.Character:FindFirstChild("Highlight") then
			Instance.new("Highlight", v.Character)
		end
	end
end

function Funcs:UpdateHighlights()
	for _, v in pairs(Players:GetChildren()) do
		if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild("Highlight") then
			Highlight = v.Character:FindFirstChild("Highlight")
			if v.Name == Sheriff and Funcs:IsAlive(v) and sheriffchams == true then
				Highlight.FillColor = Color3.fromRGB(0, 0, 225)
			elseif v.Name == Murder and Funcs:IsAlive(v) and murdchams == true then
				Highlight.FillColor = Color3.fromRGB(255, 0, 0)
			elseif v.Name == Hero and Funcs:IsAlive(v) and not Funcs:IsAlive(game.Players[Sheriff]) and sheriffchams == true then
				Highlight.FillColor = Color3.fromRGB(255, 250, 0)
			else
				Highlight.FillColor = Color3.fromRGB(0, 255, 0)
			end
		end
	end
end	

function Funcs:IsAlive(Player)
	for i, v in pairs(roles) do
		if Player.Name == i then
			if not v.Killed and not v.Dead then
				return true
			else
				return false
			end
		end
	end
end

function Funcs:refreshchams()
	for i,v in pairs (workspace:GetDescendants()) do
		if v.Name == "Highlight" then
			v:Destroy()
		end
	end
	Funcs:roleupdaterfix()
end

local nameTags = {}

function Funcs:addNameTag(gun)
	if not gun:FindFirstChild("NameTag") then
		
		local billBoard = Instance.new("BillboardGui")
		billBoard.Size = UDim2.new(0, 100, 0, 50) 
		billBoard.Adornee = gun
		billBoard.StudsOffset = Vector3.new(0, 0, 0) 
		billBoard.Name = "NameTag"
		billBoard.AlwaysOnTop = true 
		billBoard.Parent = gun

		local nameLabel = Instance.new("TextLabel")
		nameLabel.Size = UDim2.new(1, 0, 1, 0)
		nameLabel.Text = "Dropped Gun"
		nameLabel.TextScaled = true
		nameLabel.TextColor3 = Color3.new(0, 1, 0) 
		nameLabel.BackgroundTransparency = 1
		nameLabel.TextStrokeTransparency = 0
		nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
		nameLabel.Parent = billBoard

		nameTags[gun] = billBoard
	end
end

function Funcs:removeNameTag(gun)
	local nameTag = nameTags[gun]
	if nameTag then
		nameTag:Destroy()
		nameTags[gun] = nil
	end
end

function Funcs:refreshESP()
	for _, gun in ipairs(game:GetService("Workspace"):GetChildren()) do
		if gun:IsA("Part") and gun.Name:lower():find("gun") then
			Funcs:addNameTag(gun)
		end
	end

	
	for gun, _ in pairs(nameTags) do
		if not gun:IsDescendantOf(game:GetService("Workspace")) then
			Funcs:removeNameTag(gun)
		end
	end
end

function Funcs:toggleESP(enabled)
	espEnabled = enabled
	if enabled then
		refreshLoop = true
		while refreshLoop do
			Funcs:refreshESP()
			wait(1) 
		end
	else
		
		for gun, _ in pairs(nameTags) do
			Funcs:removeNameTag(gun)
		end
	end
end

function Funcs:updateWalkSpeed()
    if isToggledOn and isShiftPressed then
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = sprintingSpeed
    else
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = walkingSpeed
    end
end

function Funcs:EquipTool()
	for _,obj in next, game.Players.LocalPlayer.Backpack:GetChildren() do
		if obj.Name == "Knife" then
			local equip = game.Players.LocalPlayer.Backpack.Knife
			equip.Parent = game.Players.LocalPlayer.Character
		end
	end
  end
 
  function Funcs:Stab()
	game:GetService("Players").LocalPlayer.Character.Knife.Stab:FireServer("Down")
	end

function Funcs:killAllOnce()
	Funcs:EquipTool()
	wait()
	local localCharacter = game.Players.LocalPlayer.Character
	local knife = localCharacter and localCharacter:FindFirstChild("Knife")
	wait()
	for _, player in ipairs(game.Players:GetPlayers()) do
		if player ~= game.Players.LocalPlayer then
			wait()
			local playerCharacter = player.Character
			local humanoidRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")
			
			if humanoidRootPart then
				Funcs:Stab()
				firetouchinterest(humanoidRootPart, knife.Handle, 1)
				firetouchinterest(humanoidRootPart, knife.Handle, 0)
			end
		end
	end
end





function Funcs:CreateNameTag(player)
    local tag = Instance.new("BillboardGui")
    tag.Name = "NameTag"
    tag.AlwaysOnTop = true
    tag.Size = UDim2.new(0, 150, 0, 45)
    tag.StudsOffset = Vector3.new(0, 2, 0)
    tag.Adornee = player.Character:WaitForChild("Head")
    
    local text = Instance.new("TextLabel", tag)
    text.Name = "Name"
    text.Text = player.Name
    text.Size = UDim2.new(1, 0, 1, 0)
    text.TextColor3 = Color3.new(0, 1, 0) 
    text.BackgroundTransparency = 1
    text.Font = Enum.Font.SourceSansBold
    text.TextStrokeTransparency = 0.5
    
    
    local predefinedTextSize = 30
    text.TextSize = predefinedTextSize
    
    tag.Parent = game.CoreGui
    return tag
end


function Funcs:UpdateNameTagColor(player)
    local tag = player.Character:FindFirstChild("NameTag")
    if tag then
        if player.Name == Sheriff and sheriffesp then
            tag.TextLabel.TextColor3 = Color3.new(0, 0, 1) 
        elseif player.Name == Murder and murderesp then
            tag.TextLabel.TextColor3 = Color3.new(1, 0, 0) 
        else
            tag.TextLabel.TextColor3 = Color3.new(0, 1, 0) 
        end
    end
end

function Funcs:UpdateESP()
	if not ESPEnabled then
        return
    end
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        if player.Character then
            local tag = player.Character:FindFirstChild("NameTag")
            if not tag then
                tag = self:CreateNameTag(player)
            end
            self:UpdateNameTagColor(player)
        end
    end
end

function Funcs:OnPlayerAdded(player)
    player.CharacterAdded:Connect(function(character)
        wait(1) 
        self:UpdateESP()
    end)
    player.CharacterRemoving:Connect(function()
        self:UpdateESP()
    end)
end

function Funcs:OnPlayerRemoving(player)
    self:UpdateESP()
end

game.Players.PlayerAdded:Connect(function(player)
    Funcs:OnPlayerAdded(player)
end)

game.Players.PlayerRemoving:Connect(function(player)
    Funcs:OnPlayerRemoving(player)
end)









 function Funcs:equipGun()
	
	local player = Players.LocalPlayer
	local backpack = player.Backpack
	if backpack then
		for _, tool in ipairs(backpack:GetChildren()) do
			if tool:IsA("Tool") and tool.Name == "Gun" then
				
				player.Character.Humanoid:EquipTool(tool)
				break
			end
		end
	end
end


 function Funcs:killMurderer()
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= Players.LocalPlayer and Funcs:isMurderer(player) then
			local originalPosition = Players.LocalPlayer.Character.HumanoidRootPart.Position
			local murderer = player.Character
			local playerChar = Players.LocalPlayer.Character
			
			Funcs:equipGun()
			
			local startTime = tick()
			local endTime = startTime + 1
			
			player.CameraMode = Enum.CameraMode.LockFirstPerson
			
			while tick() < endTime do
				if murderer and playerChar then
					local murdererPosition = murderer.HumanoidRootPart.Position

					local lookAtDirection = (murdererPosition - playerChar.PrimaryPart.Position).unit
					
					Workspace.CurrentCamera.CFrame = CFrame.new(Workspace.CurrentCamera.CFrame.Position, murdererPosition)
					
					local directionToMurderer = (originalPosition - murdererPosition).unit
					local newPosition = murdererPosition - Vector3.new(2.5, 0, 1.2)
					playerChar:SetPrimaryPartCFrame(CFrame.new(newPosition, murdererPosition))
					
					if getgenv().SheriffAim and getgenv().GunAccuracy then
						if Murderer then
							local Root = Players[tostring(Murder)].Character.PrimaryPart
							local Veloc = Root.AssemblyLinearVelocity
							local Pos = Root.Position + (Veloc * Vector3.new(getgenv().GunAccuracy / 200, 0, getgenv().GunAccuracy / 200))
							args[2] = Pos
						end
					end
					
					UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
				end
				RunService.RenderStepped:Wait()
			end

			playerChar:SetPrimaryPartCFrame(CFrame.new(originalPosition))
			
			UserInputService.MouseBehavior = Enum.MouseBehavior.Default
			
			player.CameraMode = Enum.CameraMode.Classic
			
			return
		end
	end
end

function Funcs:NoClip(NoClipVal)
	if not NoClipVal then Clipping:Disconnect() return end
	Clipping = game:GetService("RunService").Stepped:connect(function()
	for i,v in next, game.Players.LocalPlayer.Character:GetChildren() do
		if v:IsA("Part") or v:IsA("BasePart") then
			v.CanCollide = false
		end
	end
	end)
	end

	local InfiniteJumpEnabled = false 
	local JumpConnection 
	
 function Funcs:ToggleInfiniteJump(toggleState)
		InfiniteJumpEnabled = toggleState
		if InfiniteJumpEnabled then
			JumpConnection = game:GetService("UserInputService").JumpRequest:Connect(function()
				if InfiniteJumpEnabled then
					game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
				end
			end)
		else
			if JumpConnection then
				JumpConnection:Disconnect() 
				JumpConnection = nil 
			end
			game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Jump = true
		end
	end


	local coinTeleportationActive = false
	local originalGravity = game.Workspace.Gravity
	local player = game.Players.LocalPlayer
	
	function Funcs:TeleportToCoins(enabled)
		if enabled and not coinTeleportationActive then
			coinTeleportationActive = true
			originalGravity = game.Workspace.Gravity
	
			game.Workspace.Gravity = originalGravity
	
			game.Workspace.Gravity = 0


			local WaitTime = 1.2
			local TeleportDuration = 0.2
	
			function Funcs:GetClosestCoin(CoinContainer, Character)
				local MinDistance = math.huge
				local ClosestCoin = nil
				for _, Coin in ipairs(CoinContainer:GetChildren()) do
					if Coin.Name == "Coin_Server" then
						local Distance = (Character.PrimaryPart.Position - Coin.Position).magnitude
						if Distance < MinDistance then
							MinDistance = Distance
							ClosestCoin = Coin
						end
					end
				end
				return ClosestCoin
			end
	
			function Funcs:MoveTowardsCoin(Character, Coin, Duration)
				local EndPosition = Coin.Position - Vector3.new(0, 1.7, 0) -- teleport to coin offset
			
				local newCFrame = CFrame.new(EndPosition, EndPosition + Vector3.new(0, -1, 0))
				Character:SetPrimaryPartCFrame(newCFrame)
			end
	
			function Funcs:CheckForCoins()
				local Character = player.Character
				local CoinContainer = game.Workspace:FindFirstChild("CoinContainer", true)
				if Character and CoinContainer and Character.Parent then
					local ClosestCoin = Funcs:GetClosestCoin(CoinContainer, Character)
					if ClosestCoin then
						Funcs:MoveTowardsCoin(Character, ClosestCoin, TeleportDuration)
					end
				end
			end
	
			Funcs:CheckForCoins()
	
			RunService.Heartbeat:Connect(function()
				if coinTeleportationActive then
					Funcs:CheckForCoins()
				end
			end)
		else
			coinTeleportationActive = false
			game.Workspace.Gravity = originalGravity
		end
	end
	
	

	function Funcs:spectateSheriff() 
		spectateSheriffEnabled = true
		
		while spectateSheriffEnabled do
			local target = nil
			
			for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
				if player ~= game.Players.LocalPlayer and player.Name == Hero then
					target = player
					break
				end
			end
			
			if not target then
				for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
					if player ~= game.Players.LocalPlayer and player.Name == Sheriff then
						target = player
						break
					end
				end
			end
			
			if target then
				workspace.CurrentCamera.CameraSubject = target.Character.Humanoid
				print("Now spectating: " .. target.Name)
			else
				print("No player found as the hero or sheriff.")
			end
			
			wait(5)
		end
	end
	
	 function Funcs:stopSpectatingSheriff()
		spectateSheriffEnabled = false
		if spectateSheriffConnection then
			spectateSheriffConnection:Disconnect()
			spectateSheriffConnection = nil
		end
		workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
		print("Stopped spectating sheriff.")
	end
	
	
	 function Funcs:spectateMurderer()
		spectateMurdererEnabled = true
		
		while spectateMurdererEnabled do
			local murderer = nil
			
			for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
				if player ~= game.Players.LocalPlayer and player.Name == Murder then
					murderer = player
					break
				end
			end
			
			if murderer then
				workspace.CurrentCamera.CameraSubject = murderer.Character.Humanoid
				print("Now spectating murderer: " .. murderer.Name)
			else
				print("No player found as the murderer.")
			end
			
			
			wait(5)  
		end
	end
	
	 function Funcs:stopSpectatingMurderer()
		spectateMurdererEnabled = false
		if spectateMurdererConnection then
			spectateMurdererConnection:Disconnect()
			spectateMurdererConnection = nil
		end
		workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
		print("Stopped spectating murderer.")
	end

    function Funcs:TeleportToPlayerPosition(selectedPlayer)
		local targetPlayer = Players:FindFirstChild(selectedPlayer)
		if targetPlayer and targetPlayer.Character then
			local targetPosition = targetPlayer.Character:GetPrimaryPartCFrame().Position
			Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
		end
	end


	function Funcs:autoRejoin()
		if autoRejoinEnabled then
			if not game:IsLoaded() then
				game.Loaded:Wait()
			end
			game.CoreGui.RobloxPromptGui.promptOverlay.DescendantAdded:Connect(function()
				local GUI = game.CoreGui.RobloxPromptGui.promptOverlay:FindFirstChild("ErrorPrompt")
				if GUI then
					if GUI.TitleFrame.ErrorTitle.Text == "Disconnected" then
						if #game.Players:GetPlayers() <= 1 then
							Player:Kick("\nRejoining...")
							wait()
							game:GetService("TeleportService"):Teleport(game.PlaceId, Player)
						else
							game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, Player)
						end
					end
				end
			end)
		end
	end

	function Funcs:toggleAutoRejoin(enabled)
		autoRejoinEnabled = enabled
		if enabled then
			Funcs:autoRejoin()
		end
	end



	












--Map Location Coordinates











-->Opening Audio And Notification<--





--->uilib<---
local Lib = Library:Init("Celestial", "V1", true) -- change to true to enable loading 

local sound = Instance.new("Sound")
sound.SoundId = "rbxassetid://17208372272" 
sound.Parent = game.Workspace 
sound:Play()

game.StarterGui:SetCore("SendNotification", {
    Title = "Hydrosploit - MM2",
    Text = "Authenticated",
    Duration = 3,
    Icon = "rbxassetid://6023565895", 
    
})


local Tab = Lib:Tab("Game", "6034227061")

local Section = Tab:Section("Visuals")






Section:Toggle("Player ESP", false, function(State)
	ESPEnabled = State
    if State then
        Funcs:UpdateESP()
    else
        for _, label in ipairs(game.CoreGui:GetChildren()) do
            if label.Name == "NameTag" then
                label:Destroy()
            end
        end
    end
end)

Section:Toggle("Murderer ESP", false, function(State)
    murderesp = State
    Funcs:UpdateESP()
end)

Section:Toggle("Sherrif ESP", false, function(State)
    sheriffesp = State
    Funcs:UpdateESP()
end)





Section:Toggle("Trap ESP", false, function(State)
	print("Toggle-1 ", State)
end)

Section:Toggle("Gun ESP", false, function(enabled)
	Funcs:toggleESP(enabled)
end)

Section:Title"Chams:"

Section:Toggle("Player Chams", false, function(playerchams)
	playerchamsloop = playerchams
					while playerchamsloop do
						function Funcs:playerchamsloopfix()
						Funcs:CreateHighlight()
						Funcs:UpdateHighlights()
						wait(1)
					end
					wait()
					pcall(Funcs.playerchamsloopfix, Funcs)
					end
					Funcs:refreshchams()
end)

Section:Toggle("Murderer Chams", false, function(murdererchams)
   if murdererchams == true then
	   murdchams = true
	   wait()
   end
   if murdererchams == false then
	   murdchams = false
	   wait()
   end
end)

Section:Toggle("Sherrif Chams", false, function(sheriffchamstoggle)
   if sheriffchamstoggle == true then
	   sheriffchams = true
	   wait()
   end
   if sheriffchamstoggle == false then
	   sheriffchams = false
	   wait()
   end
end)

Section:Toggle("Coin Chams", false, function(State)
	print("Toggle-1 ", State)
end)

Section:Title"Effects:"

Section:Toggle("Instant Role Notify", false, function(State)
	print("Toggle-1 ", State)
end)

Section:Toggle("Mute All Other Radios", false, function(State)
	print("Toggle-1 ", State)
end)

local function PlayAudioFromID(audioId)
    local audio = Instance.new("Sound")
    audio.SoundId = "rbxassetid://" .. tostring(audioId)
    audio.Parent = game.Workspace 
    audio:Play()
end

Section:TextBox("Play ID", "", function(Text)
    local success, audioId = pcall(tonumber, Text)
    if success and audioId then
        PlayAudioFromID(audioId)
    else
        print("Invalid audio ID!")
    end
end)

local Section = Tab:Section("Player")
Section:Title"Player Mods:"

----->ShiftRun<-----



Section:Toggle("Toggle Shift Run", false, function(State)
    isToggledOn = State
    Funcs:updateWalkSpeed()
end)

RunService.RenderStepped:Connect(function()
    Funcs:updateWalkSpeed()
end)

UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.LeftShift then
        isShiftPressed = true
        Funcs:updateWalkSpeed()
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.LeftShift then
        isShiftPressed = false
        Funcs:updateWalkSpeed()
    end
end)






-------------------------------

Section:Toggle("Rainbow Forcefield", false, function(state)
	rainbowForceFieldEnabled = state
	if state then
		Funcs:updateRainbowForceField()
	end
end)


Section:Button("God Mode", function()
	print"Uwu"
end)

Section:Title"Tools:"

Section:Toggle("X-Ray", false, function(state)
	getgenv().Xray = state;
	if getgenv().Xray then
		Funcs:XrayOn(Workspace);
	else
		Funcs:XrayOff(Workspace);
	end;
end)

Section:Toggle("Remove Barriers", false, function(State)
	print("Toggle-1 ", State)
end)

Section:Toggle("Unlock Camera", false, function(State)

end)

Section:Button("Blurt Roles", function(state)
		Funcs:blurtMurderer()
		wait(0.5) 
		Funcs:blurtSheriff()
end)

Section:Toggle("Anti-Void V3", false, function(State)
	print("Toggle-1 ", State)
end)

Section:Toggle("Lag Server", false, function(State)
	print("Toggle-1 ", State)
end)

local Section = Tab:Section("Player")
Section:Title"Innocent Section:"

Section:Toggle("View Dropped Gun", false, function(State)
	if State then
		Funcs:spectateGun()
	else
		Funcs:stopSpectatingGun()
	end
end)

Section:Toggle("Auto Grab Gun", false, function(toggle)
	autoGrabGunEnabled = toggle
	if autoGrabGunEnabled then
		coroutine.wrap(Funcs.autoGrabGun)()
	end
end)

Section:KeyBind("Grab Gun", "G", function(Key)
	Funcs:grabgun()
end)






Section:DropDown("Silent Aim", {"Gun", "Knife"}, true, function(Selected)
	print("Dropdown ", Selected)
end)





local GunStat = Section:Title""


local function checkGunStatus()
    for _, part in ipairs(game:GetService("Workspace"):GetChildren()) do
        if part:IsA("Part") and string.find(part.Name:lower(), "gun") then
            return true
        end
    end
    return false
end

RunService.Heartbeat:Connect(function()
    local gunAvailable = checkGunStatus()
    if gunAvailable then
        GunStat.Text = "Gun: Dropped"
        GunStat.TextColor3 = Color3.fromRGB(0, 255, 0) 
    else
        GunStat.Text = "Gun: Not Dropped"
        GunStat.TextColor3 = Color3.fromRGB(255, 0, 0)
    end
end)





---------------------------------------------

Section:Title"Sherrif Section:"

Section:Toggle("Spectate Sherrif", false, function(enabled)
	if enabled then
		spectateSheriffConnection = Funcs:spectateSheriff() 
	else
		Funcs:stopSpectatingSheriff()
	end
end)

Section:KeyBind("Shoot Murderer", "C", function(Key)
	Funcs:killMurderer()
end)

Section:Button("Sherrif Aimbot", function()
	--The key bind to activate the aimlock is right click
--FE Simple AimLock Script | Released Nov 2021 | Working.
local Area = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local MyCharacter = LocalPlayer.Character
local MyRoot = MyCharacter:FindFirstChild("HumanoidRootPart")
local MyHumanoid = MyCharacter:FindFirstChild("Humanoid")
local Mouse = LocalPlayer:GetMouse()
local MyView = Area.CurrentCamera
local MyTeamColor = LocalPlayer.TeamColor
local HoldingM2 = false
local Active = false
local Lock = false
local Epitaph = .187 ---Note: The Bigger The Number, The More Prediction.
local HeadOffset = Vector3.new(0, .1, 0)

_G.TeamCheck = false
_G.AimPart = "HumanoidRootPart"
_G.Sensitivity = 0
_G.CircleSides = 64
_G.CircleColor = Color3.fromRGB(255, 0, 130)
_G.CircleTransparency = 0
_G.CircleRadius = 200
_G.CircleFilled = false
_G.CircleVisible = true
_G.CircleThickness = 1

local FOVCircle = Drawing.new("Circle")
FOVCircle.Position = Vector2.new(MyView.ViewportSize.X / 2, MyView.ViewportSize.Y / 2)
FOVCircle.Radius = _G.CircleRadius
FOVCircle.Filled = _G.CircleFilled
FOVCircle.Color = _G.CircleColor
FOVCircle.Visible = _G.CircleVisible
FOVCircle.Transparency = _G.CircleTransparency
FOVCircle.NumSides = _G.CircleSides
FOVCircle.Thickness = _G.CircleThickness

local function CursorLock()
	UIS.MouseBehavior = Enum.MouseBehavior.LockCenter
end
local function UnLockCursor()
	HoldingM2 = false Active = false Lock = false 
	UIS.MouseBehavior = Enum.MouseBehavior.Default
end
function FindNearestPlayer()
	local dist = math.huge
	local Target = nil
	for _, v in pairs(Players:GetPlayers()) do
		if v ~= LocalPlayer and v.Character:FindFirstChild("Humanoid") and v.Character:FindFirstChild("Humanoid").Health > 0 and v.Character:FindFirstChild("HumanoidRootPart") and v then
			local TheirCharacter = v.Character
			local CharacterRoot, Visible = MyView:WorldToViewportPoint(TheirCharacter[_G.AimPart].Position)
			if Visible then
				local RealMag = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(CharacterRoot.X, CharacterRoot.Y)).Magnitude
				if RealMag < dist and RealMag < FOVCircle.Radius then
					dist = RealMag
					Target = TheirCharacter
				end
			end
		end
	end
	return Target
end

UIS.InputBegan:Connect(function(Input)
	if Input.UserInputType == Enum.UserInputType.MouseButton2 then
		HoldingM2 = true
		Active = true
		Lock = true
		if Active then
        	local The_Enemy = FindNearestPlayer()
			while HoldingM2 do task.wait(.000001)
				if Lock and The_Enemy ~= nil then
					local Future = The_Enemy.HumanoidRootPart.CFrame + (The_Enemy.HumanoidRootPart.Velocity * Epitaph + HeadOffset)
					MyView.CFrame = CFrame.lookAt(MyView.CFrame.Position, Future.Position)
					CursorLock()
				end
			end
		end
	end
end)
UIS.InputEnded:Connect(function(Input)
	if Input.UserInputType == Enum.UserInputType.MouseButton2 then
		UnLockCursor()
	end
end)
game.StarterGui:SetCore("SendNotification", {Title = "Working.", Text = "Right Mouse Button", Duration = 10,})
end)



Section:Title"Murderer Section:"

Section:Toggle("Spectate Murderer", false, function(enabled)
	if enabled then
		spectateMurdererConnection = Funcs:spectateMurderer() 
	else
		Funcs:stopSpectatingMurderer()
	end
end)

Section:KeyBind("Kill All", "K", function(Key)
	Funcs:killAllOnce()
end)





Section:Toggle("Dropped Gun Trap", false, function(State)
	print("Toggle-1 ", State)
end)


Section:Toggle("Stab Reach", false, function(knifeaura)
	knifeauraloop = knifeaura
	while knifeauraloop do
		function thtrhthtr()
		for i,v in pairs(game.Players:GetPlayers()) do
			if v ~= game.Players.LocalPlayer and game.Players.LocalPlayer:DistanceFromCharacter(v.Character.HumanoidRootPart.Position) < kniferangenum then
				wait()
				local localCharacter = game.Players.LocalPlayer.Character
				local knife = localCharacter and localCharacter:FindFirstChild("Knife")
				wait()
				local playerCharacter = v.Character
				local humanoidRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")
				
				if humanoidRootPart then
					firetouchinterest(humanoidRootPart, knife.Handle, 1)
					firetouchinterest(humanoidRootPart, knife.Handle, 0)
				end
			end
		end
	end
	wait()
	pcall(thtrhthtr)
	end
end)



Section:Toggle("Kill Player Aura", false, function(knifeaura)
	knifeauraloop = knifeaura
	while knifeauraloop do
		function thtrhthtr()
		for i,v in pairs(game.Players:GetPlayers()) do
			if v ~= game.Players.LocalPlayer and game.Players.LocalPlayer:DistanceFromCharacter(v.Character.HumanoidRootPart.Position) < kniferangenum then
				Funcs:EquipTool()
				wait()
				local localCharacter = game.Players.LocalPlayer.Character
				local knife = localCharacter and localCharacter:FindFirstChild("Knife")
				wait()
				local playerCharacter = v.Character
				local humanoidRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")
				
				if humanoidRootPart then
					Funcs:Stab()
					firetouchinterest(humanoidRootPart, knife.Handle, 1)
					firetouchinterest(humanoidRootPart, knife.Handle, 0)
				end
			end
		end
	end
	wait()
	pcall(thtrhthtr)
	end
end)




Section:Slider("Range", 20, 5, 100, function(kniferange)
	kniferangenum = tonumber(kniferange)
end)

Section:Title"Range is For Kill Aura & Stab Reach"


local Tab = Lib:Tab("Client", "6034287594")
local Section = Tab:Section("Humanoid")


Section:Slider("JumpPower", 50, 50, 250, function(Value)
	Players.LocalPlayer.Character.Humanoid.JumpPower = Value
end)

Section:Slider("HipHeight", 2, 2, 40, function(Value)
	Players.LocalPlayer.Character.Humanoid.HipHeight = Value
end)

Section:Slider("Player FOV", 70, 70, 120, function(Value)
	game.Workspace.CurrentCamera.FieldOfView = Value

end)

local Section = Tab:Section("Misc")

local Toggle = Section:Toggle("NoClip", false, function(Value)
	Funcs:NoClip(Value)
end)

Section:Toggle("Infinite Jump", false, function(enabled)
	Funcs:ToggleInfiniteJump(enabled)
	if not enabled then
		game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Jump = true
	end
end)

Section:Button("Reset Mouse Config", function()
	UserInputService.MouseBehavior = Enum.MouseBehavior.Default
end)

Section:Toggle("Rejoin After Kicked", false, function(enabled)
if enabled then
	Funcs:toggleAutoRejoin(enabled)
end
end)

Section:Button("Rejoin Server", function()
	game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
end)


local Tab = Lib:Tab("Teleports", "6023426941")
local Section = Tab:Section("Teleports")


Section:Title"Player Teleports:"

 Section:DropDown("Teleport To A Player", playerNames, false, function(Selected)
    Funcs:TeleportToPlayerPosition(Selected)
end)

Section:Title"Map Locations:"

Section:DropDown("Map Locations", {"Secret Room", "Voting Room", "Spawn", "Above Spawn"}, false, function(Selected)
    game.Players.LocalPlayer.Character:PivotTo(maplocations[Selected])
end)

Section:Button("Teleport Above Map", function()
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 35, 0)
end)

Section:Button("Teleport To Map", function()
	Funcs:teleporttomap()
end)


Section:Title"Murderer & Sherrif:"

Section:Button("Teleport To Murderer", function()
	Funcs:teleporttomurderer()
end)

Section:Button("Teleport To Sherrif", function()
	Funcs:teleporttosherrif()
end)


Section:Title"Keybinds:"

Section:KeyBind("Teleport Above Map", "V", function(Key)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 40, 0)
end)

Section:KeyBind("Teleport To Murderer", "M", function(Key)
	Funcs:teleporttomurderer()
end)

Section:KeyBind("Teleport To Sherrif", "N", function(Key)
	Funcs:teleporttosherrif()
end)














local Tab = Lib:Tab("World", "6026568213")
local Section = Tab:Section("Time Of Day")

Section:Toggle("Always Day", false, function(State)
	if State then
		Funcs:SetDaytime()
	else
		Lighting.TimeOfDay = defaultTime
	end
end)

Section:Toggle("Always Night", false, function(State)
	if State then
		Funcs:SetMidnight()
	else
		Lighting.TimeOfDay = defaultTime
	end
end)

local Section = Tab:Section("Misc")


Section:Toggle("Toggle Shadows", true, function(egg)
	if egg then
		game.Lighting.GlobalShadows = true
	else
		game.Lighting.GlobalShadows = false
			end
end)





Section:Toggle("Toggle Light", false, function(Val)
	Funcs:Light(Val)
end)

Section:Button("Better Graphics", function()
	local light = game.Lighting
	light:ClearAllChildren()
	local color = Instance.new("ColorCorrectionEffect",light)
	local bloom = Instance.new("BloomEffect",light)
	local sun = Instance.new("SunRaysEffect",light)
	local blur = Instance.new("BlurEffect",light)
	local config = {ColorCorrection = true;Sun = true;Lighting = true;BloomEffect = true;}
	color.Enabled = true
	color.Contrast = 0.15
	color.Brightness = 0.1
	color.Saturation = 0.25
	color.TintColor = Color3.fromRGB(255, 222, 211)
	sun.Enabled = true
	sun.Intensity = 0.2
	sun.Spread = 1
	bloom.Enabled = true
	bloom.Intensity = 1
	bloom.Size = 32
	bloom.Threshold = 1
	blur.Enabled = true
	blur.Size = 3
	light.Ambient = Color3.fromRGB(0, 0, 0)
	light.ColorShift_Bottom = Color3.fromRGB(0, 0, 0)
	light.ColorShift_Top = Color3.fromRGB(0, 0, 0)
	light.ExposureCompensation = 0
	light.GlobalShadows = true
	light.OutdoorAmbient = Color3.fromRGB(112, 117, 128)
	light.Outlines = false  
end)

Section:Button("RTX Shaders", function()
	loadstring(game:HttpGet("https://pastebin.com/raw/uqD7VqQU"))()
end)

Section:Button("Remove Textures", function()
	loadstring(game:HttpGet("https://pastebin.com/raw/VSjtWEDe"))()
end)



local Tab = Lib:Tab("AutoFarm", "6034973115")
local Section = Tab:Section("Coins & Eggs")

Section:Toggle("TP AutoFarm", false, function(farmcoins)
	Funcs:TeleportToCoins(farmcoins)
end)

Section:Title"Still in development, may be kicked"













local Tab = Lib:Tab("Trolling", "6035067826")
local Section = Tab:Section("Spinbot")


Section:Toggle("Toggle Spinbot", false, function(enabled)
	flingEnabled = enabled
	if flingEnabled then
		Funcs:fling(flingPower)
	else

		local existingFling = game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyThrust")
		if existingFling then
			existingFling:Destroy()
		end
	end
end)

Section:Title"Force Trade:"



Section:DropDown("Players", playerlist, false, function(tradingName)
	tradingUsername = tradingName
end)

Section:Toggle("Force Trade Player", false, function(forcetrade)
	forcetradeloop = forcetrade
	while forcetradeloop do
		game:GetService("ReplicatedStorage").Trade.SendRequest:InvokeServer(game:GetService("Players")[tradingUsername])
		wait()
		game:GetService("ReplicatedStorage").Trade.AcceptRequest:FireServer()
		wait()
	end
end)

Section:Toggle("Hide Trade UI", false, function(hidetradegui)
	hidetradeguiloop = true
	while hidetradeguiloop do
		function hidetradeguiloopfix()
		local gui = game:service'Players'.LocalPlayer:WaitForChild'PlayerGui':FindFirstChild("TradeGUI")
		if not gui then return end
		gui.Enabled = false
		local frame = gui:FindFirstChild("Container")
		if not frame then return end
		frame.Visible = false
		wait()
	end
	wait()
	pcall(hidetradeguiloopfix)
	end
end)



















local Tab = Lib:Tab("Credits", "6034287513")
local Section = Tab:Section("Script Devs")
Section:Title"Narcissist"
Section:Title"1Ryley"


local Section = Tab:Section("UI Devs")
Section:Title"SilentBen8x"


local Section = Tab:Section("Changelogs")
Section:Title"Release V4.01"












roleupdater = true
                 while roleupdater do
                     function Funcs:roleupdaterfix()
                     roles = ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer()
                     for i, v in pairs(roles) do
                         if v.Role == "Murderer" then
                             Murder = i
                         elseif v.Role == 'Sheriff'then
                             Sheriff = i
                         elseif v.Role == 'Hero'then
                             Hero = i
                         end
                     end
                     wait(1)
                 end
                 wait()
                 pcall(Funcs.roleupdaterfix, Funcs)
                 end
